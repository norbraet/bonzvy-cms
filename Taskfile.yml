version: '3'

dotenv: ['.env']

output: prefixed

tasks:
  default:
    cmds:
      - task --list
    silent: true
  
  setup:
    desc: Projet setup
    cmds:
      - echo "🛠 Initializing project setup..."
      - task: ensure-lockfile
      - echo "🐳 Building Docker containers..."
      - docker compose build
      - echo "📦 Installing Node dependencies..."
      - pnpm install
      - echo "✅ Project setup complete!"
      - echo "🚀 To start the project, run task docker:up"

  ensure-lockfile:
    desc: Ensure pnpm-lock.yaml exists
    internal: true
    cmds:
      - |
        if [ ! -f pnpm-lock.yaml ]; then
          echo "🔒 pnpm-lock.yaml not found. Generating..."
          pnpm install
          echo "✅ pnpm-lock.yaml generated."
        else
          echo "🔒 pnpm-lock.yaml found."
        fi

  db:export:
    desc: Export MongoDB database from Docker container to local folder
    cmds:
      - echo "Start creating dump..."
      - task: create-dump-dir
      - docker exec $DB_CONTAINER_NAME mongodump --archive --gzip --db $DB_NAME > $DB_DUMP_DIR/cms.$ENVIRONMENT.gz
      - echo "Database dump completed"

  db:import:
    desc: Import MongoDB database into Docker container from local archive
    vars:
      ENV: '{{.ENV | default .ENVIRONMENT}}'
    cmds:
      - echo "Start importing {{.ENV}} dump"
      - docker exec -i $DB_CONTAINER_NAME mongorestore --archive --gzip --drop < $DB_DUMP_DIR/cms.{{.ENV}}.gz
      - echo "Database dump imported"

  create-dump-dir:
    desc: Creates directory for the dump based on the OS
    internal: true
    cmds:
      - |
        if [ "{{OS}}" = "windows" ]; then 
          mkdir $DB_DUMP_DIR 
        else 
          mkdir -p $DB_DUMP_DIR 
        fi

  docker:up:
    desc: Start all services using docker-compose
    cmds:
      - echo "Starting services..."
      - docker compose up -d
      - echo "Services started"

  docker:down:
    desc: Stopp all services using docker-compose
    cmds:
      - echo "Stopping services..."
      - docker-compose down
      - echo "Services stopped"

  docker:restart:
    desc: Restart all services using docker-compose
    cmds:
      - task docker:down
      - task docker:up

  docker:logs:
    desc: View logs for a specific service
    vars:
      SERVICE: '{{.SERVICE | default "payload"}}'
    cmds:
      - echo "Viewing logs for the {{.SERVICE}} service."
      - docker-compose logs -f {{.SERVICE}}

  docker:ps:
    desc: List all running containers
    cmds:
      - docker ps